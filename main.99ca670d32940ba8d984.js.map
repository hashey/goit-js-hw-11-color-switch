{"version":3,"sources":["webpack:///./js/prom-one.js","webpack:///./js/prom-two.js","webpack:///./js/prom-three.js","webpack:///./js/color-switch.js","webpack:///./js/timer-class.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","array","logError","warn","amount","catch","colors","refs","start","document","querySelector","stop","container","body","timerId","changeBackground","colorNum","style","backgroundColor","addEventListener","event","target","setInterval","disabled","clearInterval","selector","targetDate","this","_refs","_getRefs","_targetDate","root","timer","days","hours","mins","secs","startCountdown","intervalId","Date","parse","now","innerHTML"],"mappings":"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","file":"main.99ca670d32940ba8d984.js","sourcesContent":["// =================Task#1==========================\r\nconst delay = ms => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => resolve(ms), ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n// ==================================================\r\n","// ==================Task#2==========================\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve, reject) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n// ==================================================\r\n","// ==================Task#3==========================\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve([transaction.id, delay]);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = array => {\r\n  console.log(`Transaction ${array[0]} processed in ${array[1]}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n// ==================================================\r\n","const colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n//====================================================================\r\nconst refs = {\r\n  start: document.querySelector('[data-action=start]'),\r\n  stop: document.querySelector('[data-action=stop]'),\r\n  container: document.querySelector('.btn-container'),\r\n  body: document.querySelector('body'),\r\n};\r\nlet timerId = null;\r\n\r\nrefs.container.addEventListener('click', clickHandler);\r\n\r\nfunction clickHandler(event) {\r\n  if (event.target === refs.start) {\r\n    timerId = setInterval(changeBackground, 1000);\r\n    refs.start.disabled = true;\r\n    refs.stop.disabled = false;\r\n  } else if (event.target === refs.stop) {\r\n    clearInterval(timerId);\r\n    refs.start.disabled = false;\r\n    refs.stop.disabled = true;\r\n  }\r\n}\r\n\r\nfunction changeBackground() {\r\n  const colorNum = randomIntegerFromInterval(0, 5);\r\n  refs.body.style.backgroundColor = `${colors[colorNum]}`;\r\n}\r\n","class CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this._refs = this._getRefs(selector);\r\n    this._targetDate = targetDate;\r\n  }\r\n\r\n  _getRefs(root) {\r\n    const refs = {};\r\n\r\n    refs.timer = document.querySelector(`${root}`);\r\n    refs.days = document.querySelector(`${root}  [data-value=days]`);\r\n    refs.hours = document.querySelector(`${root} [data-value=hours]`);\r\n    refs.mins = document.querySelector(`${root}  [data-value=mins]`);\r\n    refs.secs = document.querySelector(`${root}  [data-value=secs]`);\r\n\r\n    return refs;\r\n  }\r\n\r\n  startCountdown() {\r\n    const intervalId = setInterval(() => {\r\n      const time = Date.parse(this._targetDate) - Date.now();\r\n      //========================================================\r\n      const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor(\r\n        (time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\r\n      );\r\n      const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n      const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n      //========================================================\r\n      this._refs.days.innerHTML = days;\r\n      this._refs.hours.innerHTML = hours;\r\n      this._refs.mins.innerHTML = mins;\r\n      this._refs.secs.innerHTML = secs;\r\n      if (time < 0) {\r\n        this._refs.timer.innerHTML = 'Time Is Out';\r\n        clearInterval(intervalId);\r\n      }\r\n    }, 1000);\r\n  }\r\n}\r\n\r\nconst timerNewYear = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jan 01, 2021'),\r\n});\r\n\r\ntimerNewYear.startCountdown();\r\n"],"sourceRoot":""}